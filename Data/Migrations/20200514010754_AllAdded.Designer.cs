// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsLogger.Data;

namespace SportsLogger.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200514010754_AllAdded")]
    partial class AllAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Arena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArenaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArenaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArenaStatusId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArenaStatusId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Arena");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.ArenaStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArenaStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArenaStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClubStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ClubStatusId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.ClubStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClubStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClubStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId1")
                        .HasColumnType("int");

                    b.Property<int?>("GameCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId1")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId2")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId3")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("TSMNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ClubId");

                    b.HasIndex("ClubId1");

                    b.HasIndex("GameCategoryId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("SeriesId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.GameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameCategory");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwishNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PersonRoleId");

                    b.HasIndex("PersonStatusId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PersonRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonRole");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.PersonStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PersonStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PersonTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonType");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountPaidHD1")
                        .HasColumnType("int");

                    b.Property<int>("AmountPaidHD2")
                        .HasColumnType("int");

                    b.Property<int>("AmountPaidLD1")
                        .HasColumnType("int");

                    b.Property<int>("AmountPaidLD2")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameTotalKost")
                        .HasColumnType("int");

                    b.Property<int>("HD1Alowens")
                        .HasColumnType("int");

                    b.Property<int>("HD1Fee")
                        .HasColumnType("int");

                    b.Property<int>("HD1LateGameKost")
                        .HasColumnType("int");

                    b.Property<int>("HD1Other")
                        .HasColumnType("int");

                    b.Property<int>("HD1TotalFee")
                        .HasColumnType("int");

                    b.Property<int>("HD1TravelKost")
                        .HasColumnType("int");

                    b.Property<int>("HD2Alowens")
                        .HasColumnType("int");

                    b.Property<int>("HD2Fee")
                        .HasColumnType("int");

                    b.Property<int>("HD2LateGameKost")
                        .HasColumnType("int");

                    b.Property<int>("HD2Other")
                        .HasColumnType("int");

                    b.Property<int>("HD2TotalFee")
                        .HasColumnType("int");

                    b.Property<int>("HD2TravelKost")
                        .HasColumnType("int");

                    b.Property<int>("HalfTotalAmountToPay")
                        .HasColumnType("int");

                    b.Property<int>("LD1Alowens")
                        .HasColumnType("int");

                    b.Property<int>("LD1Fee")
                        .HasColumnType("int");

                    b.Property<int>("LD1LateGameKost")
                        .HasColumnType("int");

                    b.Property<int>("LD1Other")
                        .HasColumnType("int");

                    b.Property<int>("LD1TotalFee")
                        .HasColumnType("int");

                    b.Property<int>("LD1TravelKost")
                        .HasColumnType("int");

                    b.Property<int>("LD2Alowens")
                        .HasColumnType("int");

                    b.Property<int>("LD2Fee")
                        .HasColumnType("int");

                    b.Property<int>("LD2LateGameKost")
                        .HasColumnType("int");

                    b.Property<int>("LD2Other")
                        .HasColumnType("int");

                    b.Property<int>("LD2TotalFee")
                        .HasColumnType("int");

                    b.Property<int>("LD2TravelKost")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmountPaid")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmountToPay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReceiptCategoryId");

                    b.HasIndex("ReceiptStatusId");

                    b.HasIndex("ReceiptTypeId");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.ReceiptCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceiptCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReceiptCategory");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.ReceiptStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceiptStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReceiptStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.ReceiptType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceiptTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReceiptType");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriesStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeriesStatusId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.SeriesStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SeriesStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SeriesStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SportName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.SportsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.Property<decimal>("TimeSpent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SportId");

                    b.ToTable("SportsLog");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ClubId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamStatusId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.TeamStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeamStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamStatus");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("GameId1")
                        .HasColumnType("int");

                    b.Property<int?>("GameId10")
                        .HasColumnType("int");

                    b.Property<int?>("GameId11")
                        .HasColumnType("int");

                    b.Property<int?>("GameId12")
                        .HasColumnType("int");

                    b.Property<int?>("GameId13")
                        .HasColumnType("int");

                    b.Property<int?>("GameId14")
                        .HasColumnType("int");

                    b.Property<int?>("GameId2")
                        .HasColumnType("int");

                    b.Property<int?>("GameId3")
                        .HasColumnType("int");

                    b.Property<int?>("GameId4")
                        .HasColumnType("int");

                    b.Property<int?>("GameId5")
                        .HasColumnType("int");

                    b.Property<int?>("GameId6")
                        .HasColumnType("int");

                    b.Property<int?>("GameId7")
                        .HasColumnType("int");

                    b.Property<int?>("GameId8")
                        .HasColumnType("int");

                    b.Property<int?>("GameId9")
                        .HasColumnType("int");

                    b.Property<DateTime>("TournamentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameId1");

                    b.HasIndex("GameId10");

                    b.HasIndex("GameId11");

                    b.HasIndex("GameId12");

                    b.HasIndex("GameId13");

                    b.HasIndex("GameId14");

                    b.HasIndex("GameId2");

                    b.HasIndex("GameId3");

                    b.HasIndex("GameId4");

                    b.HasIndex("GameId5");

                    b.HasIndex("GameId6");

                    b.HasIndex("GameId7");

                    b.HasIndex("GameId8");

                    b.HasIndex("GameId9");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.TournamentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TournamentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Arena", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.ArenaStatus", "ArenaStatus")
                        .WithMany()
                        .HasForeignKey("ArenaStatusId");

                    b.HasOne("SportsLogger.Models.DataModels.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Club", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("SportsLogger.Models.DataModels.ClubStatus", "ClubStatus")
                        .WithMany()
                        .HasForeignKey("ClubStatusId");

                    b.HasOne("SportsLogger.Models.DataModels.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Game", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("SportsLogger.Models.DataModels.Club", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("SportsLogger.Models.DataModels.Club", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("ClubId1");

                    b.HasOne("SportsLogger.Models.DataModels.GameCategory", "GameCategory")
                        .WithMany()
                        .HasForeignKey("GameCategoryId");

                    b.HasOne("SportsLogger.Models.DataModels.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("SportsLogger.Models.DataModels.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId");

                    b.HasOne("SportsLogger.Models.DataModels.Person", "HD1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("SportsLogger.Models.DataModels.Person", "HD2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("SportsLogger.Models.DataModels.Person", "LD1")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("SportsLogger.Models.DataModels.Person", "LD2")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("SportsLogger.Models.DataModels.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Person", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("SportsLogger.Models.DataModels.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("SportsLogger.Models.DataModels.PersonRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId");

                    b.HasOne("SportsLogger.Models.DataModels.PersonStatus", "PersonStatus")
                        .WithMany()
                        .HasForeignKey("PersonStatusId");

                    b.HasOne("SportsLogger.Models.DataModels.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Receipt", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("SportsLogger.Models.DataModels.ReceiptCategory", "ReceiptCategory")
                        .WithMany()
                        .HasForeignKey("ReceiptCategoryId");

                    b.HasOne("SportsLogger.Models.DataModels.ReceiptStatus", "ReceiptStatus")
                        .WithMany()
                        .HasForeignKey("ReceiptStatusId");

                    b.HasOne("SportsLogger.Models.DataModels.ReceiptType", "ReceiptType")
                        .WithMany()
                        .HasForeignKey("ReceiptTypeId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Series", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("SportsLogger.Models.DataModels.Person", "Admin")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("SportsLogger.Models.DataModels.SeriesStatus", "SeriesStatus")
                        .WithMany()
                        .HasForeignKey("SeriesStatusId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.SportsLog", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("SportsLogger.Models.DataModels.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Team", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("SportsLogger.Models.DataModels.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("SportsLogger.Models.DataModels.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("SportsLogger.Models.DataModels.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("SportsLogger.Models.DataModels.TeamStatus", "TeamStatus")
                        .WithMany()
                        .HasForeignKey("TeamStatusId");
                });

            modelBuilder.Entity("SportsLogger.Models.DataModels.Tournament", b =>
                {
                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game1")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game2")
                        .WithMany()
                        .HasForeignKey("GameId1");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game11")
                        .WithMany()
                        .HasForeignKey("GameId10");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game12")
                        .WithMany()
                        .HasForeignKey("GameId11");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game13")
                        .WithMany()
                        .HasForeignKey("GameId12");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game14")
                        .WithMany()
                        .HasForeignKey("GameId13");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game15")
                        .WithMany()
                        .HasForeignKey("GameId14");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game3")
                        .WithMany()
                        .HasForeignKey("GameId2");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game4")
                        .WithMany()
                        .HasForeignKey("GameId3");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game5")
                        .WithMany()
                        .HasForeignKey("GameId4");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game6")
                        .WithMany()
                        .HasForeignKey("GameId5");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game7")
                        .WithMany()
                        .HasForeignKey("GameId6");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game8")
                        .WithMany()
                        .HasForeignKey("GameId7");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game9")
                        .WithMany()
                        .HasForeignKey("GameId8");

                    b.HasOne("SportsLogger.Models.DataModels.Game", "Game10")
                        .WithMany()
                        .HasForeignKey("GameId9");

                    b.HasOne("SportsLogger.Models.DataModels.TournamentType", "TournamentType")
                        .WithMany()
                        .HasForeignKey("TournamentTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
